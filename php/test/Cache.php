<?php
namespace ccxtpro;
include_once __DIR__ . '/../../vendor/autoload.php';
// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------

function equals($a, $b) {
    return json_encode($a) === json_encode($b);
}

// ----------------------------------------------------------------------------

$cache = new ArrayCache (3);

$cache->append (1);
$cache->append (2);
$cache->append (3);
$cache->append (4);

assert (equals ($cache, [2, 3, 4]));

$cache->append (5);
$cache->append (6);
$cache->append (7);
$cache->append (8);

assert (equals ($cache, [6, 7, 8]));

$cache->clear ();

assert (equals ($cache, array()));

$cache->append (1);

assert (equals ($cache, [1]));

// ----------------------------------------------------------------------------

$cache = new ArrayCache (1);

$cache->append (1);
$cache->append (2);

assert (equals ($cache, [2]));

// ----------------------------------------------------------------------------

$cache = new ArrayCacheBySymbolById ();

$object1 = array( 'symbol' => 'BTC/USDT', 'id' => 'abcdef', 'i' => 1 );
$object2 = array( 'symbol' => 'ETH/USDT', 'id' => 'qwerty', 'i' => 2 );
$object3 = array( 'symbol' => 'BTC/USDT', 'id' => 'abcdef', 'i' => 3 );

$cache->append ($object1);
$cache->append ($object2);
$cache->append ($object3); // should update index 0

assert (equals ($cache, array( $object3, $object2 )));

$maxLength = 5;

$cache = new ArrayCacheBySymbolById ($maxLength);

for ($i = 1; $i < 11; $i++) {
    $cache->append (array(
        'symbol' => 'BTC/USDT',
        'id' => (string) $i,
        'i' => $i,
    ));
}

assert (equals ($cache, array(
    array( 'symbol' => 'BTC/USDT', 'id' => '6', 'i' => 6 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '7', 'i' => 7 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '8', 'i' => 8 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '9', 'i' => 9 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '10', 'i' => 10 ),
)));

for ($i = 1; $i < 11; $i++) {
    $cache->append (array(
        'symbol' => 'BTC/USDT',
        'id' => (string) $i,
        'i' => $i + 10,
    ));
}

assert (equals ($cache, array(
    array( 'symbol' => 'BTC/USDT', 'id' => '6', 'i' => 16 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '7', 'i' => 17 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '8', 'i' => 18 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '9', 'i' => 19 ),
    array( 'symbol' => 'BTC/USDT', 'id' => '10', 'i' => 20 ),
)));
